function trainedClassifier = trainClassifierAdaboost(trainingData)
% trainClassifier(trainingData)
%  returns a trained classifier and its validation accuracy.
%  This code recreates the classification model trained in
%  Classification Learner app.
%
%   Input:
%       trainingData: the training data of same data type as imported
%        in the app (table or matrix).
%
%   Output:
%       trainedClassifier: a struct containing the trained classifier.
%        The struct contains various fields with information about the
%        trained classifier.
%
%       trainedClassifier.predictFcn: a function to make predictions
%        on new data. It takes an input of the same form as this training
%        code (table or matrix) and returns predictions for the response.
%        If you supply a matrix, include only the predictors columns (or
%        rows).
%
%       validationAccuracy: a double containing the validation accuracy
%        score in percent. In the app, the History list displays this
%        overall accuracy score for each model.
%
%  Use the code to train the model with new data.
%  To retrain your classifier, call the function from the command line
%  with your original data or new data as the input argument trainingData.
%
%  For example, to retrain a classifier trained with the original data set
%  T, enter:
%    [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
%  To make predictions with the returned 'trainedClassifier' on new data T,
%  use
%    yfit = trainedClassifier.predictFcn(T)
%
%  To automate training the same classifier with new data, or to learn how
%  to programmatically train classifiers, examine the generated code.

% Auto-generated by MATLAB on 22-Nov-2017 19:12:55


inputTable = trainingData;
% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
predictorNames = inputTable.Properties.VariableNames;
n_vars = size(predictorNames,2);
%{'feature_matrix1', 'feature_matrix2', 'feature_matrix3', 'feature_matrix4', 'feature_matrix5', 'feature_matrix6', 'feature_matrix7', 'feature_matrix8', 'feature_matrix9', 'feature_matrix10', 'feature_matrix11', 'feature_matrix12', 'feature_matrix13', 'feature_matrix14'};
predictors = inputTable(:, predictorNames(1:n_vars-1));
response = inputTable.Group;

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 20);
classificationEnsemble = fitensemble(...
    predictors, ...
    response, ...
    'AdaBoostM1', ...
    30, ...
    template, ...
    'Type', 'Classification', ...
    'LearnRate', 0.1, ...
    'ClassNames', {'b'; 'g'});

trainedClassifier.ClassificationEnsemble = classificationEnsemble;
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(x);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));
%inputTable = trainingData;
% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
%predictorNames = {'feature_matrix1', 'feature_matrix2', 'feature_matrix3', 'feature_matrix4', 'feature_matrix5', 'feature_matrix6', 'feature_matrix7', 'feature_matrix8', 'feature_matrix9', 'feature_matrix10', 'feature_matrix11', 'feature_matrix12', 'feature_matrix13', 'feature_matrix14'};
%predictors = inputTable(:, predictorNames(1:n_vars-1));
%response = inputTable.Group;


% Perform cross-validation
%partitionedModel = crossval(trainedClassifier.ClassificationEnsemble, 'KFold', 10);

% Compute validation accuracy
%validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');

% Compute validation predictions and scores
%[validationPredictions, validationScores] = kfoldPredict(partitionedModel);